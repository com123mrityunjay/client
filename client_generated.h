// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENT_TEST_H_
#define FLATBUFFERS_GENERATED_CLIENT_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Test {

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct Client;
struct ClientBuilder;

enum TypeOfClient : uint8_t {
  TypeOfClient_NONE = 0,
  TypeOfClient_Person = 1,
  TypeOfClient_Group = 2,
  TypeOfClient_MIN = TypeOfClient_NONE,
  TypeOfClient_MAX = TypeOfClient_Group
};

inline const TypeOfClient (&EnumValuesTypeOfClient())[3] {
  static const TypeOfClient values[] = {
    TypeOfClient_NONE,
    TypeOfClient_Person,
    TypeOfClient_Group
  };
  return values;
}

inline const char * const *EnumNamesTypeOfClient() {
  static const char * const names[4] = {
    "NONE",
    "Person",
    "Group",
    nullptr
  };
  return names;
}

inline const char *EnumNameTypeOfClient(TypeOfClient e) {
  if (::flatbuffers::IsOutRange(e, TypeOfClient_NONE, TypeOfClient_Group)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTypeOfClient()[index];
}

template<typename T> struct TypeOfClientTraits {
  static const TypeOfClient enum_value = TypeOfClient_NONE;
};

template<> struct TypeOfClientTraits<Test::Person> {
  static const TypeOfClient enum_value = TypeOfClient_Person;
};

template<> struct TypeOfClientTraits<Test::Group> {
  static const TypeOfClient enum_value = TypeOfClient_Group;
};

bool VerifyTypeOfClient(::flatbuffers::Verifier &verifier, const void *obj, TypeOfClient type);
bool VerifyTypeOfClientVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

enum Gender : int8_t {
  Gender_Male = 0,
  Gender_Female = 1,
  Gender_MIN = Gender_Male,
  Gender_MAX = Gender_Female
};

inline const Gender (&EnumValuesGender())[2] {
  static const Gender values[] = {
    Gender_Male,
    Gender_Female
  };
  return values;
}

inline const char * const *EnumNamesGender() {
  static const char * const names[3] = {
    "Male",
    "Female",
    nullptr
  };
  return names;
}

inline const char *EnumNameGender(Gender e) {
  if (::flatbuffers::IsOutRange(e, Gender_Male, Gender_Female)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGender()[index];
}

struct Person FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8,
    VT_GENDER = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int16_t age() const {
    return GetField<int16_t>(VT_AGE, 0);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  Test::Gender gender() const {
    return static_cast<Test::Gender>(GetField<int8_t>(VT_GENDER, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_AGE, 2) &&
           VerifyField<float>(verifier, VT_WEIGHT, 4) &&
           VerifyField<int8_t>(verifier, VT_GENDER, 1) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(int16_t age) {
    fbb_.AddElement<int16_t>(Person::VT_AGE, age, 0);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Person::VT_WEIGHT, weight, 0.0f);
  }
  void add_gender(Test::Gender gender) {
    fbb_.AddElement<int8_t>(Person::VT_GENDER, static_cast<int8_t>(gender), 0);
  }
  explicit PersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Person> CreatePerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int16_t age = 0,
    float weight = 0.0f,
    Test::Gender gender = Test::Gender_Male) {
  PersonBuilder builder_(_fbb);
  builder_.add_weight(weight);
  builder_.add_name(name);
  builder_.add_age(age);
  builder_.add_gender(gender);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Person> CreatePersonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int16_t age = 0,
    float weight = 0.0f,
    Test::Gender gender = Test::Gender_Male) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Test::CreatePerson(
      _fbb,
      name__,
      age,
      weight,
      gender);
}

struct Group FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GRP_NAME = 4,
    VT_AVG_AGE = 6,
    VT_AVG_WEIGHT = 8,
    VT_LIST_NAMES = 10
  };
  const ::flatbuffers::String *grp_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GRP_NAME);
  }
  float avg_age() const {
    return GetField<float>(VT_AVG_AGE, 0.0f);
  }
  float avg_weight() const {
    return GetField<float>(VT_AVG_WEIGHT, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *list_names() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LIST_NAMES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GRP_NAME) &&
           verifier.VerifyString(grp_name()) &&
           VerifyField<float>(verifier, VT_AVG_AGE, 4) &&
           VerifyField<float>(verifier, VT_AVG_WEIGHT, 4) &&
           VerifyOffset(verifier, VT_LIST_NAMES) &&
           verifier.VerifyVector(list_names()) &&
           verifier.VerifyVectorOfStrings(list_names()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_grp_name(::flatbuffers::Offset<::flatbuffers::String> grp_name) {
    fbb_.AddOffset(Group::VT_GRP_NAME, grp_name);
  }
  void add_avg_age(float avg_age) {
    fbb_.AddElement<float>(Group::VT_AVG_AGE, avg_age, 0.0f);
  }
  void add_avg_weight(float avg_weight) {
    fbb_.AddElement<float>(Group::VT_AVG_WEIGHT, avg_weight, 0.0f);
  }
  void add_list_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> list_names) {
    fbb_.AddOffset(Group::VT_LIST_NAMES, list_names);
  }
  explicit GroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Group> CreateGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> grp_name = 0,
    float avg_age = 0.0f,
    float avg_weight = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> list_names = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_list_names(list_names);
  builder_.add_avg_weight(avg_weight);
  builder_.add_avg_age(avg_age);
  builder_.add_grp_name(grp_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Group> CreateGroupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *grp_name = nullptr,
    float avg_age = 0.0f,
    float avg_weight = 0.0f,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *list_names = nullptr) {
  auto grp_name__ = grp_name ? _fbb.CreateString(grp_name) : 0;
  auto list_names__ = list_names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*list_names) : 0;
  return Test::CreateGroup(
      _fbb,
      grp_name__,
      avg_age,
      avg_weight,
      list_names__);
}

struct Client FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TYPE_TYPE = 4,
    VT_CLIENT_TYPE = 6
  };
  Test::TypeOfClient client_type_type() const {
    return static_cast<Test::TypeOfClient>(GetField<uint8_t>(VT_CLIENT_TYPE_TYPE, 0));
  }
  const void *client_type() const {
    return GetPointer<const void *>(VT_CLIENT_TYPE);
  }
  template<typename T> const T *client_type_as() const;
  const Test::Person *client_type_as_Person() const {
    return client_type_type() == Test::TypeOfClient_Person ? static_cast<const Test::Person *>(client_type()) : nullptr;
  }
  const Test::Group *client_type_as_Group() const {
    return client_type_type() == Test::TypeOfClient_Group ? static_cast<const Test::Group *>(client_type()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CLIENT_TYPE_TYPE, 1) &&
           VerifyOffset(verifier, VT_CLIENT_TYPE) &&
           VerifyTypeOfClient(verifier, client_type(), client_type_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Test::Person *Client::client_type_as<Test::Person>() const {
  return client_type_as_Person();
}

template<> inline const Test::Group *Client::client_type_as<Test::Group>() const {
  return client_type_as_Group();
}

struct ClientBuilder {
  typedef Client Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_type_type(Test::TypeOfClient client_type_type) {
    fbb_.AddElement<uint8_t>(Client::VT_CLIENT_TYPE_TYPE, static_cast<uint8_t>(client_type_type), 0);
  }
  void add_client_type(::flatbuffers::Offset<void> client_type) {
    fbb_.AddOffset(Client::VT_CLIENT_TYPE, client_type);
  }
  explicit ClientBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Client> CreateClient(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Test::TypeOfClient client_type_type = Test::TypeOfClient_NONE,
    ::flatbuffers::Offset<void> client_type = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_client_type(client_type);
  builder_.add_client_type_type(client_type_type);
  return builder_.Finish();
}

inline bool VerifyTypeOfClient(::flatbuffers::Verifier &verifier, const void *obj, TypeOfClient type) {
  switch (type) {
    case TypeOfClient_NONE: {
      return true;
    }
    case TypeOfClient_Person: {
      auto ptr = reinterpret_cast<const Test::Person *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case TypeOfClient_Group: {
      auto ptr = reinterpret_cast<const Test::Group *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyTypeOfClientVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyTypeOfClient(
        verifier,  values->Get(i), types->GetEnum<TypeOfClient>(i))) {
      return false;
    }
  }
  return true;
}

inline const Test::Client *GetClient(const void *buf) {
  return ::flatbuffers::GetRoot<Test::Client>(buf);
}

inline const Test::Client *GetSizePrefixedClient(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Test::Client>(buf);
}

inline bool VerifyClientBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Test::Client>(nullptr);
}

inline bool VerifySizePrefixedClientBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Test::Client>(nullptr);
}

inline void FinishClientBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test::Client> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClientBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test::Client> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Test

#endif  // FLATBUFFERS_GENERATED_CLIENT_TEST_H_
